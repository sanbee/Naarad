Aug. 24, 2019
-------------

o With the default set up on ArduinoIDE 1.8.x, "Arduino as ISP" did not detect ATT88.
  After some reasearch, it turned out that the compile command constructed uses
  "-carduino".  However the correct one to use, on Arduino UNO for programming ATT88 is
  "-cstk500v1".  

  Arduino IDE comes with a file named "programmer.txt", typically at the following path:

     ~/.arduino15/packages/arduino/hardware/avr/1.6.23/programmers.txt

     (1.6.23 may change with the IDE version used)

  It also exists at 

     <IDE ROOT>/hardware/arduino/avr/programmers.txt

  The entry in these files (may need to change both!) for "arduinoasisp" has to be the
  following.  Note that the ".protocol" value has to change to "stk500v1".
  ".program.protocol=arduino" is left unchanged

    arduinoasisp.name=Arduino as ISP
    arduinoasisp.communication=serial
    arduinoasisp.protocol=stk500v1
    arduinoasisp.speed=19200
    arduinoasisp.program.protocol=arduino
    arduinoasisp.program.speed=19200
    arduinoasisp.program.tool=avrdude
    arduinoasisp.program.extra_params=-P{serial.port} -b{program.speed}

  Some forums seems to suggest that this will be fixed in the new release which it's out
  yet.  I have checked the nightly build and it's not fixed in at least that.

  Apparently this is due to some change in OS (Linux) that requires this change.  I also
  feel there much be some OS related change since I have successfully programmed ATT88
  *without* needing the above change from the same machine (work laptop) running RHFL6.
  Now with RHEL7, the above problem appears.

  Also, this change was made in Arduino IDE to enable programming ATMega chips (or
  something similar), but it inadvertently, created the above problem. 


  For the record, the compile command that works is:

   /export/home/langur/sbhatnag/.arduino15/packages/arduino/tools/avrdude/6.3.0-arduino14/bin/avrdude -C/export/home/langur/sbhatnag/.arduino15/packages/arduino/tools/avrdude/6.3.0-arduino14/etc/avrdude.conf -v -pattiny88 -cstk500v1 -P/dev/ttyACM0 -b19200 -Uflash:w:/tmp/arduino_build_738819/DRV8833_ATT88_6Port.ino.hex:i 


22Sept2019:
-----------

Following is the board setup for programming the MCU:

Arduino: 1.8.5 (Linux), Board: "ATtiny48/88, Disabled, ATtiny88, 1 MHz (internal), EEPROM retained, B.O.D. Disabled"

#/export/home/langur/sbhatnag/Projects/GitHub/Naarad/Nodes/DRV8833_ATT88_6Port/DRV8833_ATT88_6Port.ino:45:48: note: #pragma message: Compiling in RF69_COMPAT mode
 #pragma message("Compiling in RF69_COMPAT mode")
                                                ^
#Sketch uses 4910 bytes (59%) of program storage space. Maximum is 8192 bytes.
#Global variables use 221 bytes (43%) of dynamic memory, leaving 291 bytes for local variables. Maximum is 512 bytes.

Following the command to up-load the sketch on the MCU.  Note the "-pattiny88 -cstk500v1"
is necessary to recognize the ATT88 MCU

/export/home/langur/sbhatnag/.arduino15/packages/arduino/tools/avrdude/6.3.0-arduino14/bin/avrdude -C/export/home/langur/sbhatnag/.arduino15/packages/arduino/tools/avrdude/6.3.0-arduino14/etc/avrdude.conf -v -pattiny88 -cstk500v1 -P/dev/ttyACM0 -b19200 -Uflash:w:/tmp/arduino_build_584259/DRV8833_ATT88_6Port.ino.hex:i 

Branch Controller6Port_WithRFM
------------------------------

Making the code in DRV8833_ATT88_6Port.ino on "Controller6Port_WithRFM" branch ready for
RFM connection.  The code on the Git branch "Controller6Port" is the one which has been
used to test setting one solenoid ON at a time for 6 min. in a sequence.

This code will send a ping on RFM and listen for response for max. of 1 sec. or 3
attempts. This is since till the BaseStation's radio range is appropriate to reach this
controller, it may never hear a response from the BaseStation.  However the radio will be
connected and s/w read for it on this controller since that's an easy to set the
parameters of the controller.  Without the radio, the only way would be re-program the
MCU on the board!

The OTA command is designed to carry the PORT number, but it has not been tested yet on
the 2Port controller (RFM69_RxTx.ino). TEST IT FIRST!!!


Testing Strategy:
----------------

  0. Ensure that the RFM connections are correct on the board.
      - May need to compare with the ATT84, where it works (TinyTx3).
      - Following are the connections on TinyTx3:
 
           RFM pin ANT is Pin1

           RFM Pins              ATT84 Pins
           --------------------------------
               5                    8
               6                    9
               7                    3
               8                    7
               9                    5

 
          SPI Pin names

              RFM                ATT84
           --------------------------------
            MOSI (5)             MISO (8)
            SCK  (6)             SCK  (9)
            NSS  (7)             PCINT10 (3)
            MISO (8)             MOSI (7)
            DIO0 (9)             INT0 (5)


  1. Write-up the RFM and check that it is communicating with the BaseStation.
  2. Set the parameters OTA.
  3. Check the pins via LED connections.  This will also test the PORT parameter of the
     OTA commands.


